from random import randint

datapoints = [randint(30, 1000) for i in range(0,500)]
import heapq

# datapoints = [456, 154, 640, 307, 97, 157, 665, 572, 446, 608, 413, 892, 645, 626, 130, 302, 850, 71, 268, 930, 904, 423, 30, 701, 939, 149, 968, 772, 185, 300, 487, 556, 805, 183, 623, 176, 951, 511, 957, 432, 48, 800, 807, 480, 98, 803, 191, 804, 301, 692, 763, 216, 685, 417, 713, 857, 842, 208, 860, 71, 708, 755, 112, 337, 597, 873, 322, 554, 423, 257, 415, 824, 124, 39, 252, 248, 509, 728, 397, 447, 923, 976, 906, 714, 668, 244, 838, 753, 328, 445, 685, 484, 976, 213, 420, 251, 677, 288, 223, 872, 849, 664, 847, 375, 942, 208, 74, 682, 781, 993, 204, 282, 660, 399, 907, 347, 259, 198, 437, 386, 775, 369, 330, 145, 807, 899, 449, 239, 309, 691, 326, 602, 334, 86, 819, 975, 674, 335, 985, 349, 243, 504, 351, 370, 169, 135, 264, 732, 860, 64, 408, 430, 512, 397, 60, 816, 226, 494, 227, 234, 307, 167, 713, 498, 835, 637, 55, 494, 450, 922, 247, 495, 909, 789, 564, 599, 194, 400, 708, 94, 781, 751, 285, 138, 330, 930, 73, 305, 498, 278, 176, 770, 180, 748, 348, 724, 509, 941, 283, 326, 402, 929, 631, 491, 173, 409, 396, 689, 346, 962, 784, 976, 485, 657, 980, 670, 476, 128, 740, 245, 692, 44, 763, 756, 178, 34, 347, 35, 470, 46, 397, 323, 951, 554, 460, 817, 855, 559, 736, 606, 484, 704, 603, 858, 438, 154, 587, 238, 552, 126, 138, 568, 777, 117, 125, 861, 225, 452, 710, 46, 583, 664, 723, 474, 858, 996, 701, 339, 850, 183, 537, 555, 143, 798, 369, 781, 133, 537, 631, 900, 971, 100, 716, 248, 388, 822, 497, 839, 235, 923, 210, 894, 305, 465, 485, 509, 535, 212, 191, 788, 362, 681, 710, 202, 819, 848, 191, 54, 444, 357, 570, 569, 440, 397, 684, 386, 957, 822, 783, 121, 486, 988, 891, 172, 480, 546, 112, 565, 833, 371, 887, 450, 182, 633, 419, 876, 414, 638, 476, 231, 215, 186, 646, 852, 899, 297, 131, 962, 499, 871, 451, 977, 838, 114, 770, 270, 826, 356, 689, 992, 968, 381, 96, 912, 68, 524, 857, 604, 638, 146, 506, 671, 895, 728, 490, 817, 53, 478, 586, 818, 555, 952, 898, 404, 150, 684, 513, 799, 424, 134, 543, 43, 105, 481, 667, 687, 165, 224, 447, 214, 1000, 293, 252, 231, 477, 684, 106, 845, 695, 239, 103, 939, 460, 132, 501, 66, 764, 435, 388, 842, 806, 719, 782, 213, 572, 758, 254, 850, 104, 753, 713, 332, 51, 451, 342, 320, 172, 502, 151, 703, 848, 240, 131, 249, 314, 997, 144, 379, 113, 200, 491, 917, 644, 147, 385, 513, 590, 716, 153, 776, 581, 696, 551, 970, 484, 516, 644, 616, 376, 807, 182, 838, 310, 106, 731, 314, 441, 224, 380, 598, 998, 909, 70, 486, 302, 731, 297, 644, 133, 761, 354, 108, 163, 844, 138, 541, 374, 818, 355, 686]



def findThreshold():
    flag = True
    heap = -1
    while flag:
        initial_threshold = sorted(datapoints)[heap]
        current_index = datapoints.index(initial_threshold)
        decrement = 4
        while current_index - decrement < 0:
            decrement -= 1
        startWindow = current_index - decrement
        endWindow = current_index
        try:
            while endWindow < current_index+4:
                count = 0
                for k in range(startWindow , endWindow+1):
                    if datapoints[k] >= initial_threshold:
                        count += 1
                if count == 5:
                    flag = False
                    print datapoints[startWindow:endWindow+1], initial_threshold, startWindow, endWindow
                startWindow += 1
                endWindow += 1
        except:
            pass
        heap -= 1

findThreshold()







